# This file has been generated by `make_travis_yml_2.hs`
# see https://github.com/hvr/multi-ghc-travis for more information
language: c
sudo: true

git:
  submodules: false

cache:
  directories:
    - $HOME/.cabal/packages
    - $HOME/.cabal/store

before_cache:
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/build-reports.log
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/00-index.*
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/*.json
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.cache

matrix:
  include:
    - env: CABALVER=head GHCVER=8.0.2
      compiler: ": #GHC 8.0.2"
      addons: {apt: {packages: [cabal-install-head,ghc-8.0.2], sources: [hvr-ghc]}}
    - env: CABALVER=head GHCVER=8.2.2
      compiler: ": #GHC 8.2.2"
      addons: {apt: {packages: [cabal-install-head,ghc-8.2.2], sources: [hvr-ghc]}}
    - env: CABALVER=head GHCVER=8.4.4
      compiler: ": #GHC 8.4.4"
      addons: {apt: {packages: [cabal-install-head,ghc-8.4.4], sources: [hvr-ghc]}}
    - env: CABALVER=head GHCVER=8.6.5
      compiler: ": #GHC 8.6.5"
      addons: {apt: {packages: [cabal-install-head,ghc-8.6.5], sources: [hvr-ghc]}}

before_install:
 - unset CC
 - mkdir -p ${HOME}/bin
 - mkdir -p deps

install:
 - export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$HOME/bin:$PATH
 - cabal update
 - cabal get hspec-discover -d deps
 - cp cabal.project.travis cabal.project
 - cabal --version
 - BENCH=${BENCH---enable-benchmarks}
 - TEST=${TEST---enable-tests}
 - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
 - travis_retry cabal update -v
 - sed -i 's/^jobs:/-- jobs:/' ${HOME}/.cabal/config

# we need hspec-discover :-(
 - cabal new-build hspec-discover:exe:hspec-discover
 - cp -v dist-newstyle/build/*/*/*/*/hspec-discover/build/hspec-discover/hspec-discover ${HOME}/bin
 - pwd

 - cabal new-build ${TEST} ${BENCH} --dep -j2

# Here starts the actual work to be performed for the package under test;
# any command which exits with a non-zero exit code causes the build to fail.
script:
 - if [ -f configure.ac ]; then autoreconf -i; fi
 # this builds all libraries and executables (including tests/benchmarks)
 - cabal new-build ${TEST} ${BENCH}

 # there's no 'cabal new-test' yet, so let's emulate for now
 - SRC_BASENAME=$(cabal info . | awk '{print $2;exit}')
 - TESTS=( $(awk 'tolower($0) ~ /^test-suite / { print $2 }' *.cabal) );
   shopt -s globstar;
   RC=true; for T in ${TESTS[@]}; do echo "== $T ==";
   if dist-newstyle/build/**/$SRC_BASENAME/**/build/$T/$T; then echo "= $T OK =";
   else echo "= $T FAILED ="; RC=false; fi; done; $RC
 - cabal new-sdist # test that a source-distribution can be generated

 # Check that the resulting source distribution can be built w/o and w tests
 - mkdir -p dist
 - tar -C dist/ -xf dist-newstyle/sdist/$SRC_BASENAME.tar.gz
 - cp -r deps dist/$SRC_BASENAME/
 - cp cabal.project dist/$SRC_BASENAME/
 - cd dist/$SRC_BASENAME/
 - cabal new-build --disable-tests --disable-benchmarks
 - rm -rf ./dist-newstyle
 - cabal new-build ${TEST} ${BENCH}

# EOF
